from abc import ABC, abstractmethod
from typing import List

import numpy as np
from tsplib95.models import StandardProblem


class ProblemSolver(ABC):
    @staticmethod
    def _calculate_distance(point_1: List[int], point_2: List[int]) -> int:
        """ Calculates distance between given points.

        :param point_1: point coordinates (x, y)
        :param point_2: point coordinates (x, y)
        :return: distance between given points
        """
        pow_x: int = (point_1[0] - point_2[0]) ** 2
        pow_y: int = (point_1[1] - point_2[1]) ** 2

        return round((pow_x + pow_y) ** 0.5)

    @staticmethod
    def create_distance_matrix(problem: StandardProblem) -> np.ndarray:
        """ Creates distance matrix for given graph.

        :param problem: problem which contains graph nodes
        :return: distance matrix
        """
        matrix = np.full(shape=(problem.dimension, problem.dimension), dtype=np.uint32, fill_value=-1)

        node_dict = dict(problem.node_coords)

        for node_index_1 in range(problem.dimension - 1):
            node_1 = node_dict[node_index_1 + 1]
            for node_index_2 in range(node_index_1 + 1, problem.dimension):
                node_2 = node_dict[node_index_2 + 1]
                distance = ProblemSolver._calculate_distance(node_1, node_2)
                matrix[node_index_1, node_index_2] = distance
                matrix[node_index_2, node_index_1] = distance

        return matrix

    @abstractmethod
    def solve(self, distance_matrix: np.ndarray, start_node: int = 1) -> List[int]:
        """ Creates path for given graph.

        :param distance_matrix: distance_matrix of given graph
        :param start_node: index of path start node
        :return: Path generated by given implementation of problem solver
        """
        pass
